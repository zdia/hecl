<?xml version="1.0" ?>
<project name="AndroidHecl" default="android-debug">
  <!-- SDK Locations -->

  <property file="android/android.properties"/>

  <!-- Application Package Name -->
  <property name="application-package" value="org.hecl.android" />

  <property name="android-defines" value="" />

  <!-- The intermediates directory -->
  <!-- Eclipse uses "bin" for its own output, so we do the same. -->
  <property name="outdir" value="android/bin" />

  <!-- ************************************************************************************* -->
  <!-- No user servicable parts below. -->

  <property name="android-framework" value="${android-platform}/framework.aidl" />

  <!-- Input directories -->
  <property name="resource-dir" value="android/res" />
  <property name="asset-dir" value="android/assets" />
  <property name="srcdir" value="android/src" />
  <condition property="srcdir-ospath"
    value="${basedir}\${srcdir}"
    else="${basedir}/${srcdir}" >
    <os family="windows"/>
  </condition>

  <property name="external-libs" value="android/libs" />
  <condition property="external-libs-ospath"
    value="${basedir}\${external-libs}"
    else="${basedir}/${external-libs}" >
    <os family="windows"/>
  </condition>

  <!-- Output directories -->
  <property name="outdir-classes" value="${outdir}/classes" />
  <condition property="outdir-classes-ospath"
    value="${basedir}\${outdir-classes}"
    else="${basedir}/${outdir-classes}" >
    <os family="windows"/>
  </condition>

  <!-- Create R.java in the source directory -->
  <property name="outdir-r" value="android/src" />

  <!-- Intermediate files -->
  <property name="dex-file" value="classes.dex" />
  <property name="intermediate-dex" value="${outdir}/${dex-file}" />
  <condition property="intermediate-dex-ospath"
    value="${basedir}\${intermediate-dex}"
    else="${basedir}/${intermediate-dex}" >
    <os family="windows"/>
  </condition>

  <!-- The final package file to generate -->
  <property name="resources-package" value="${outdir}/${ant.project.name}.ap_" />
  <condition property="resources-package-ospath"
    value="${basedir}\${resources-package}"
    else="${basedir}/${resources-package}" >
    <os family="windows"/>
  </condition>

  <property name="out-debug-package" value="${outdir}/${ant.project.name}-debug.apk" />
  <condition property="out-debug-package-ospath"
    value="${basedir}\${out-debug-package}"
    else="${basedir}/${out-debug-package}" >
    <os family="windows"/>
  </condition>

  <property name="out-unsigned-package" value="${outdir}/${ant.project.name}-unsigned.apk" />
  <condition property="out-unsigned-package-ospath"
    value="${basedir}\${out-unsigned-package}"
    else="${basedir}/${out-unsigned-package}" >
    <os family="windows"/>
  </condition>

  <!-- Tools -->
  <condition property="aapt" value="${android-platform-tools}/aapt.exe" else="${android-platform-tools}/aapt" >
    <os family="windows"/>
  </condition>
  <condition property="aidl" value="${android-platform-tools}/aidl.exe" else="${android-platform-tools}/aidl" >
    <os family="windows"/>
  </condition>
  <condition property="adb" value="${android-tools}/adb.exe" else="${android-platform-tools}/adb" >
    <os family="windows"/>
  </condition>
  <condition property="dx" value="${android-platform-tools}/dx.bat" else="${android-platform-tools}/dx" >
    <os family="windows"/>
  </condition>
  <condition property="apk-builder" value="${android-tools}/apkbuilder.bat" else="${android-tools}/apkbuilder" >
    <os family="windows"/>
  </condition>

  <property name="android-jar" value="${android-platform}/android.jar" />

  <!-- Rules -->

  <!-- Create the output directories if they don't exist yet. -->
  <target name="dirs">
    <echo>Creating output directories if needed...</echo>
    <mkdir dir="${outdir}" />
    <mkdir dir="${outdir-classes}" />
    <mkdir dir="${android.pre}/core"/>
    <mkdir dir="${android.build}" />
    <mkdir dir="${external-libs-ospath}" />
  </target>

  <!-- Generate the R.java file for this project's resources. -->
  <target name="resource-src" depends="dirs">
    <echo>Generating R.java / Manifest.java from the resources...</echo>
    <exec executable="${aapt}" failonerror="true">
      <arg value="package" />
      <arg value="-m" />
      <arg value="-J" />
      <arg value="${outdir-r}" />
      <arg value="-M" />
      <arg value="android/AndroidManifest.xml" />
      <arg value="-S" />
      <arg value="${resource-dir}" />
      <arg value="-I" />
      <arg value="${android-jar}" />
    </exec>
  </target>

  <!-- Generate java classes from .aidl files. -->
  <target name="aidl" depends="dirs">
    <echo>Compiling aidl files into Java classes...</echo>
    <apply executable="${aidl}" failonerror="true">
      <arg value="-p${android-framework}" />
      <arg value="-I${srcdir}" />
      <fileset dir="${srcdir}">
	<include name="**/*.aidl"/>
      </fileset>
    </apply>
  </target>

  <target name="compileAndroidJava"
    description="Compile Android Java integration support"
    depends="compileAndroid">
    <wtkpreprocess srcdir="java"
      symbols="${android.defines}"
      destdir="${android.pre}/java"/>
    <javac srcdir="${android.pre}/java"
      destdir="${android.build}"
      debug="${hecldebug}">
      <classpath refid="android.coreclasspath"/>
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="compileAndroidHttp"
    description="Compile Android Hecl http support"
    depends="compileAndroid">
    <wtkpreprocess srcdir="net"
      symbols="${android.defines}"
      destdir="${android.pre}/net"/>
    <javac srcdir="${android.pre}/net"
      destdir="${android.build}"
      debug="${hecldebug}">
      <classpath refid="android.coreclasspath"/>
      <classpath refid="classpath"/>
    </javac>
  </target>

  <!-- added by z.dia -->
    <target name="compileAndroidFiles"
    description="Compile Android Hecl file support"
    depends="compileAndroid">
    <wtkpreprocess srcdir="files"
      symbols="${android.defines}"
      destdir="${android.pre}/files"/>
    <javac srcdir="${android.pre}/files"
      destdir="${android.build}"
      debug="${hecldebug}">
      <classpath refid="android.coreclasspath"/>
      <classpath refid="classpath"/>
    </javac>
  </target>
  
  <!-- Compile this project's .java files into .class files. -->
  <target name="compileAndroid" depends="dirs, resource-src, aidl">
    <wtkpreprocess srcdir="core"
      symbols="${android.defines}"
      destdir="${android.pre}/core"/>
    <javac encoding="ascii"
      target="1.5"
      debug="${hecldebug}"
      extdirs=""
      srcdir="${android.pre}/core"
      destdir="${android.build}"
      bootclasspath="${android-jar}" />
  </target>

  <target name="compileAndroidMain"
    description="Compile Android Hecl sources"
    depends="compileAndroid,compileAndroidHttp,compileAndroidJava,compileAndroidFiles">

    <javac srcdir="android/src"
      debug="${hecldebug}"
      destdir="${android.build}">
      <classpath refid="android.coreclasspath"/>
      <classpath refid="classpath"/>
      <bootclasspath path="${android-jar}"/>
    </javac>
  </target>

  <target name="hecl-android-jar" depends="compileAndroidMain">
    <jar destfile="android/Hecl.jar" basedir="${android.build}">
    </jar>
  </target>

  <!-- Convert this project's .class files into .dex files. -->
  <target name="dex" depends="hecl-android-jar">
    <echo>Converting compiled files and external libraries into ${outdir}/${dex-file}...</echo>
    <apply executable="${dx}" failonerror="true" parallel="true">
      <arg value="-JXmx512m" />
      <arg value="--dex" />
      <arg value="--output=${intermediate-dex-ospath}" />
      <arg path="android/Hecl.jar" />
      <fileset dir="${android-platform-tools}/lib" includes="*.jar"/>
    </apply>
  </target>

  <!-- Put the project's resources into the output package file. -->
  <target name="package-res-and-assets">
    <echo>Packaging resources and assets...</echo>
    <exec executable="${aapt}" failonerror="true">
      <arg value="package" />
      <arg value="-f" />
      <arg value="-M" />
      <arg value="android/AndroidManifest.xml" />
      <arg value="-S" />
      <arg value="${resource-dir}" />
      <arg value="-A" />
      <arg value="${asset-dir}" />
      <arg value="-I" />
      <arg value="${android-jar}" />
      <arg value="-F" />
      <arg value="${resources-package}" />
    </exec>
  </target>

  <!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
  <target name="package-res-no-assets">
    <echo>Packaging resources...</echo>
    <exec executable="${aapt}" failonerror="true">
      <arg value="package" />
      <arg value="-f" />
      <arg value="-M" />
      <arg value="android/AndroidManifest.xml" />
      <arg value="-S" />
      <arg value="${resource-dir}" />
      <!-- No assets directory -->
      <arg value="-I" />
      <arg value="${android-jar}" />
      <arg value="-F" />
      <arg value="${resources-package}" />
    </exec>
  </target>

  <!-- Invoke the proper target depending on whether or not
  an assets directory is present. -->
  <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
  only when the assets dir exists. -->
  <target name="package-res">
    <available file="${asset-dir}" type="dir"
      property="res-target" value="and-assets" />
    <property name="res-target" value="no-assets" />
    <antcall target="package-res-${res-target}" />
  </target>

  <!-- Package the application and sign it with a debug key.
  This is the default target when building. It is used for debug. -->
  <target name="android-debug" depends="dex, package-res">
    <echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>
    <exec executable="${apk-builder}" failonerror="true">
      <arg value="${out-debug-package-ospath}" />
      <arg value="-z" />
      <arg value="${resources-package-ospath}" />
      <arg value="-f" />
      <arg value="${intermediate-dex-ospath}" />
      <arg value="-rf" />
      <arg value="${srcdir-ospath}" />
      <arg value="-rj" />
      <arg value="${external-libs-ospath}" />
    </exec>
  </target>

  <!-- Package the application without signing it.
  This allows for the application to be signed later with an official publishing key. -->
  <target name="android-release" depends="dex, package-res">
    <echo>Packaging ${out-unsigned-package} for release...</echo>
    <exec executable="${apk-builder}" failonerror="true">
      <arg value="${out-unsigned-package-ospath}" />
      <arg value="-u" />
      <arg value="-z" />
      <arg value="${resources-package-ospath}" />
      <arg value="-f" />
      <arg value="${intermediate-dex-ospath}" />
      <arg value="-rf" />
      <arg value="${srcdir-ospath}" />
      <arg value="-rj" />
      <arg value="${external-libs-ospath}" />
    </exec>
    <echo>It will need to be signed with jarsigner before being published.</echo>
  </target>

  <!-- Install the package on the default emulator -->
  <target name="android-install" depends="android-debug">
    <echo>Installing ${out-debug-package} onto default emulator...</echo>
    <exec executable="${adb}" failonerror="true">
      <arg value="install" />
      <arg value="${out-debug-package}" />
    </exec>
  </target>

  <target name="android-reinstall" depends="android-debug">
    <echo>Installing ${out-debug-package} onto default emulator...</echo>
    <exec executable="${adb}" failonerror="true">
      <arg value="install" />
      <arg value="-r" />
      <arg value="${out-debug-package}" />
    </exec>
  </target>

  <!-- Uinstall the package from the default emulator -->
  <target name="android-uninstall">
    <echo>Uninstalling ${application-package} from the default emulator...</echo>
    <exec executable="${adb}" failonerror="true">
      <arg value="uninstall" />
      <arg value="${application-package}" />
    </exec>
  </target>

  <target name="packageAndroid" depends="android-debug" />


</project>
